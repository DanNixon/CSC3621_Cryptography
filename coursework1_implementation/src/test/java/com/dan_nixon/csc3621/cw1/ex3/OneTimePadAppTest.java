package com.dan_nixon.csc3621.cw1.ex3;

import org.junit.*;
import static org.junit.Assert.*;
import java.util.Map;
import java.util.HashMap;
import java.io.File;
import java.io.IOException;
import com.dan_nixon.csc3621.cw1.Utils;
import com.dan_nixon.csc3621.cw1.ex3.OneTimePadApp;

public class OneTimePadAppTest
{
  @Test
  public void testPadGenerationClockSeed() throws IOException
  {
    Map<String, String> options = new HashMap<String, String>();
    options.put("length", "256");
    options.put("generate-pad-file", "");
    File padFile = new File(this.getClass().getResource("/test_binary_write.bin").getFile());

    OneTimePadApp.runGeneratePadMode(options, padFile);

    byte[] padData = Utils.readBinaryFile(padFile);
    assertEquals(256, padData.length);
  }

  @Test
  public void testPadGenerationIntegerSeed() throws IOException
  {
    Map<String, String> options = new HashMap<String, String>();
    options.put("length", "256");
    options.put("generate-pad-file", "");
    options.put("seed", "253635900");
    File padFile = new File(this.getClass().getResource("/test_binary_write.bin").getFile());

    OneTimePadApp.runGeneratePadMode(options, padFile);

    byte[] padData = Utils.readBinaryFile(padFile);
    assertEquals(256, padData.length);

    // Generated from seed
    assertEquals((byte) 0x0F, padData[0]);
    assertEquals((byte) 0x1E, padData[1]);
    assertEquals((byte) 0x2D, padData[2]);
    assertEquals((byte) 0x3C, padData[3]);

    // Generated by iteration
    assertEquals((byte) 0x11, padData[4]);
  }
}
